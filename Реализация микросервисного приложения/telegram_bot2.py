import asyncio
import logging
import aiohttp
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN2")
MICROSERVICE_A_URL = "http://localhost:5001/power"
MICROSERVICE_B_URL = "http://localhost:5002/square"

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN2 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


async def call_microservice_a(value):
    """–í—ã–∑–æ–≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ A –¥–ª—è –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è 2 –≤ —Å—Ç–µ–ø–µ–Ω—å"""
    try:
        async with aiohttp.ClientSession() as session:
            payload = {"value": value}
            async with session.post(MICROSERVICE_A_URL, json=payload) as response:
                data = await response.json()
                if response.status == 200:
                    return data
                else:
                    return {"error": data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ A: {e}")
        return {"error": f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–º A: {str(e)}"}


async def call_microservice_b(value):
    """–í—ã–∑–æ–≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ B –¥–ª—è –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –≤ –∫–≤–∞–¥—Ä–∞—Ç"""
    try:
        async with aiohttp.ClientSession() as session:
            payload = {"value": value}
            async with session.post(MICROSERVICE_B_URL, json=payload) as response:
                data = await response.json()
                if response.status == 200:
                    return data
                else:
                    return {"error": data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ B: {e}")
        return {"error": f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–º B: {str(e)}"}


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /calc –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.

–§–æ—Ä–º–∞—Ç: /calc <—á–∏—Å–ª–æ1> <—á–∏—Å–ª–æ2>

–ù–∞–ø—Ä–∏–º–µ—Ä: /calc 3 5

–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç:
‚Ä¢ –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –Ω–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å A (–≤—ã—á–∏—Å–ª–∏—Ç 2^—á–∏—Å–ª–æ1)
‚Ä¢ –í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ –Ω–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å B (–≤—ã—á–∏—Å–ª–∏—Ç —á–∏—Å–ª–æ2^2)

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/calc - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
/help - –ø–æ–º–æ—â—å
    """
    await message.answer(welcome_text)


@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

–ö–æ–º–∞–Ω–¥–∞: /calc <—á–∏—Å–ª–æ1> <—á–∏—Å–ª–æ2>

–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:
1Ô∏è‚É£ –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å A
   ‚Üí –í—ã—á–∏—Å–ª—è–µ—Ç—Å—è 2^—á–∏—Å–ª–æ1

2Ô∏è‚É£ –í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å B
   ‚Üí –í—ã—á–∏—Å–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ2^2

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ /calc 3 4
  –†–µ–∑—É–ª—å—Ç–∞—Ç: 2^3 = 8, 4^2 = 16

‚Ä¢ /calc 5 7
  –†–µ–∑—É–ª—å—Ç–∞—Ç: 2^5 = 32, 7^2 = 49

–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
‚Ä¢ –î–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ A: —Å—Ç–µ–ø–µ–Ω—å ‚â§ 1000
‚Ä¢ –î–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ B: —á–∏—Å–ª–æ ‚â§ ¬±100000
    """
    await message.answer(help_text)


@dp.message(Command("calc"))
async def cmd_calc(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /calc"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()[1:]  # –£–±–∏—Ä–∞–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É

        if len(args) != 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /calc <—á–∏—Å–ª–æ1> <—á–∏—Å–ª–æ2>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /calc 3 5"
            )
            return

        # –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–∞
        try:
            value1 = float(args[0])
            value2 = float(args[1])
        except ValueError:
            await message.answer(
                "‚ùå –û–±–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /calc 3 5 –∏–ª–∏ /calc 2.5 4.7"
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

        # –í—ã–∑—ã–≤–∞–µ–º –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [
            call_microservice_a(value1),
            call_microservice_b(value2)
        ]

        results = await asyncio.gather(*tasks)
        result_a, result_b = results

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_lines = []
        response_lines.append("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—á–∏—Å–ª–µ–Ω–∏–π:")
        response_lines.append("")

        if "error" not in result_a:
            response_lines.append(f"üî∏ –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å A: 2^{value1} = {result_a['result']}")
        else:
            response_lines.append(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ A: {result_a['error']}")

        if "error" not in result_b:
            response_lines.append(f"üî∏ –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å B: {value2}^2 = {result_b['result']}")
        else:
            response_lines.append(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ B: {result_b['error']}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await processing_msg.delete()
        await message.answer("\n".join(response_lines))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ calc: {e}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
        )


@dp.message()
async def handle_unknown(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "‚Ä¢ /calc <—á–∏—Å–ª–æ1> <—á–∏—Å–ª–æ2> - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è\n"
        "‚Ä¢ /help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    )


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
    try:
        async with aiohttp.ClientSession() as session:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ A
            try:
                async with session.get("http://localhost:5001/health") as response:
                    if response.status == 200:
                        logger.info("‚úÖ –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å A –¥–æ—Å—Ç—É–ø–µ–Ω")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å A –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status})")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—É A: {e}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ B
            try:
                async with session.get("http://localhost:5002/health") as response:
                    if response.status == 200:
                        logger.info("‚úÖ –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å B –¥–æ—Å—Ç—É–ø–µ–Ω")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å B –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status})")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—É B: {e}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())