import os
import asyncio
import logging
from dotenv import load_dotenv
from decimal import Decimal, InvalidOperation

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, BotCommand

import httpx

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CURRENCY_MANAGER_URL = os.getenv("CURRENCY_MANAGER_URL", "http://localhost:5001")
DATA_MANAGER_URL = os.getenv("DATA_MANAGER_URL", "http://localhost:5002")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")


# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class CurrencyManagementStates(StatesGroup):
    choosing_action = State()
    entering_name = State()
    entering_rate = State()


class ConversionStates(StatesGroup):
    entering_currency_name = State()
    entering_amount = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–∞–º–∏")],
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç"), KeyboardButton(text="üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è")]
    ],
    resize_keyboard=True
)

manage_currency_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É")],
        [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã")],
        [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    welcome_text = (
        "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç!</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–∞–º–∏\n"
        "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç\n"
        "üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç\n"
    )
    await message.answer(welcome_text, reply_markup=main_menu_keyboard, parse_mode="HTML")


# –ö–æ–º–∞–Ω–¥–∞ /manage_currency
@dp.message(F.text == "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–∞–º–∏")
async def manage_currencies_start(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=manage_currency_keyboard)
    await state.set_state(CurrencyManagementStates.choosing_action)


@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–∞–º–∏
@dp.message(CurrencyManagementStates.choosing_action)
async def process_manage_action_choice(message: types.Message, state: FSMContext):
    action_text = message.text

    if action_text == "üîô –ù–∞–∑–∞–¥":
        await back_to_main_menu(message, state)
        return

    actions_map = {
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É": "add",
        "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã": "update",
        "‚ùå –£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É": "delete"
    }

    if action_text not in actions_map:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫", reply_markup=manage_currency_keyboard)
        return

    await state.update_data(action=actions_map[action_text])
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(CurrencyManagementStates.entering_name)


# –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã
@dp.message(CurrencyManagementStates.entering_name)
async def process_currency_name_input(message: types.Message, state: FSMContext):
    currency_name = message.text.strip().upper()

    if not currency_name.isalpha():
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã")
        return

    await state.update_data(currency_name=currency_name)
    data = await state.get_data()
    action = data.get("action")

    if action == "delete":
        await attempt_delete_currency(message, state, currency_name)
    elif action in ["add", "update"]:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –∫ —Ä—É–±–ª—é:")
        await state.set_state(CurrencyManagementStates.entering_rate)


# –í–≤–æ–¥ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã
@dp.message(CurrencyManagementStates.entering_rate)
async def process_currency_rate_input(message: types.Message, state: FSMContext):
    try:
        rate_str = message.text.replace(",", ".")
        rate = float(rate_str)
        if rate <= 0:
            raise ValueError("–ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞")
        return

    data = await state.get_data()
    currency_name = data.get("currency_name")
    action = data.get("action")

    if action == "add":
        await attempt_add_currency(message, state, currency_name, rate)
    elif action == "update":
        await attempt_update_currency(message, state, currency_name, rate)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
async def attempt_add_currency(message: types.Message, state: FSMContext, currency_name: str, rate: float):
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.post(f"{CURRENCY_MANAGER_URL}/load",
                                         json={"currency_name": currency_name, "rate": rate})

            if response.status_code == 200:
                await message.answer(f"‚úÖ –í–∞–ª—é—Ç–∞ <b>{currency_name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
                                     parse_mode="HTML", reply_markup=main_menu_keyboard)
            elif response.status_code == 400:
                await message.answer(f"‚ö†Ô∏è –î–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                                     reply_markup=main_menu_keyboard)
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã",
                                     reply_markup=main_menu_keyboard)
    except Exception as e:
        logger.error(f"Error adding currency: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º", reply_markup=main_menu_keyboard)
    finally:
        await state.clear()


async def attempt_update_currency(message: types.Message, state: FSMContext, currency_name: str, rate: float):
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.post(f"{CURRENCY_MANAGER_URL}/update_currency",
                                         json={"currency_name": currency_name, "rate": rate})

            if response.status_code == 200:
                await message.answer(f"‚úÖ –ö—É—Ä—Å –≤–∞–ª—é—Ç—ã <b>{currency_name}</b> –æ–±–Ω–æ–≤–ª–µ–Ω",
                                     parse_mode="HTML", reply_markup=main_menu_keyboard)
            elif response.status_code == 404:
                await message.answer(f"‚ö†Ô∏è –í–∞–ª—é—Ç–∞ <b>{currency_name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                                     parse_mode="HTML", reply_markup=main_menu_keyboard)
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞",
                                     reply_markup=main_menu_keyboard)
    except Exception as e:
        logger.error(f"Error updating currency: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º", reply_markup=main_menu_keyboard)
    finally:
        await state.clear()


async def attempt_delete_currency(message: types.Message, state: FSMContext, currency_name: str):
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.post(f"{CURRENCY_MANAGER_URL}/delete",
                                         json={"currency_name": currency_name})

            if response.status_code == 200:
                await message.answer(f"‚úÖ –í–∞–ª—é—Ç–∞ <b>{currency_name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞",
                                     parse_mode="HTML", reply_markup=main_menu_keyboard)
            elif response.status_code == 404:
                await message.answer(f"‚ö†Ô∏è –í–∞–ª—é—Ç–∞ <b>{currency_name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                                     parse_mode="HTML", reply_markup=main_menu_keyboard)
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã",
                                     reply_markup=main_menu_keyboard)
    except Exception as e:
        logger.error(f"Error deleting currency: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º", reply_markup=main_menu_keyboard)
    finally:
        await state.clear()


# –ö–æ–º–∞–Ω–¥–∞ /get_currencies
@dp.message(F.text.in_(["üìã –°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç", "/get_currencies"]))
async def get_all_currencies(message: types.Message, state: FSMContext):
    await state.clear()
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(f"{DATA_MANAGER_URL}/currencies")

            if response.status_code == 200:
                currencies_data = response.json()
                if not currencies_data:
                    await message.answer("‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç –ø—É—Å—Ç")
                    return

                text = "üìä <b>–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç:</b>\n\n"
                for currency_item in currencies_data:
                    rate = Decimal(str(currency_item['rate'])).quantize(Decimal('0.01'))
                    text += f"<b>{currency_item['currency_name']}</b>: {rate} ‚ÇΩ\n"

                await message.answer(text, parse_mode="HTML")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç")
    except Exception as e:
        logger.error(f"Error getting currencies: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º")


# –ö–æ–º–∞–Ω–¥–∞ /convert
@dp.message(F.text.in_(["üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è", "/convert"]))
async def start_conversion_process(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(ConversionStates.entering_currency_name)


@dp.message(ConversionStates.entering_currency_name)
async def process_conversion_currency_name(message: types.Message, state: FSMContext):
    currency_name = message.text.strip().upper()

    if not currency_name.isalpha():
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã")
        return

    await state.update_data(currency_name_to_convert=currency_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
    await state.set_state(ConversionStates.entering_amount)


@dp.message(ConversionStates.entering_amount)
async def process_conversion_amount(message: types.Message, state: FSMContext):
    try:
        amount_str = message.text.replace(",", ".")
        amount = float(amount_str)
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
        return

    data = await state.get_data()
    currency_name = data.get("currency_name_to_convert")

    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(f"{DATA_MANAGER_URL}/convert",
                                        params={"currency_name": currency_name, "amount": amount})

            if response.status_code == 200:
                result_data = response.json()
                converted_amount = Decimal(str(result_data.get("result"))).quantize(Decimal('0.01'))

                await message.answer(f"üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{converted_amount} ‚ÇΩ</b>",
                                     parse_mode="HTML", reply_markup=main_menu_keyboard)
            elif response.status_code == 404:
                await message.answer(f"‚ö†Ô∏è –í–∞–ª—é—Ç–∞ {currency_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                                     reply_markup=main_menu_keyboard)
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏",
                                     reply_markup=main_menu_keyboard)
    except Exception as e:
        logger.error(f"Error converting currency: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º", reply_markup=main_menu_keyboard)
    finally:
        await state.clear()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    commands_for_bot = [
        BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="/get_currencies", description="–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç"),
        BotCommand(command="/convert", description="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç")
    ]
    await bot.set_my_commands(commands_for_bot)

    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")