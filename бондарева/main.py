
#задание 1
import datetime
class Сотрудники:
    def __init__(self, код, фамилия, имя, отчество, должность, дата_приема, зарплата):
        self._код = код
        self.__фамилия = фамилия
        self.__имя = имя
        self.__отчество = отчество
        self.должность = должность
        self.дата_приема = self._преобразовать_дату(дата_приема)
        self.зарплата = зарплата
    def _преобразовать_дату(self, дата_строка):
        try:
            return datetime.datetime.strptime(дата_строка, "%Y-%m-%d").date()
        except ValueError:
            return None
    def получить_ФИО(self):
        return f"{self.__фамилия} {self.__имя} {self.__отчество}"

    def __str__(self):
        return f"Код: {self._код}, ФИО: {self.получить_ФИО()}, Должность: {self.должность}, Дата приема: {self.дата_приема}, Зарплата: {self.зарплата}"
сотрудник1 = Сотрудники(1, "Иванов", "Иван", "Иванович", "Программист", "2022-01-15", 120000)
сотрудник2 = Сотрудники(2, "Петров", "Петр", "Петрович", "Дизайнер", "2023-05-20", 90000)
сотрудник3 = Сотрудники(3, "Сидорова", "Анна", "Сергеевна", "Менеджер", "2021-09-10", 150000)
print(сотрудник1)
print(сотрудник2)
print(сотрудник3)

#задание 2
class Студент:
    def __init__(self, фио, группа, оценка):
        self.фио = фио
        self.группа = группа
        self.оценка = оценка
        self.статус = self.определить_статус(оценка)
    def определить_статус(self, оценка):
        if оценка == 5:
            return "отличник"
        elif оценка == 4:
            return "хорошист"
        elif оценка == 3:
            return "троечник"
        else:
            return "двоечник"
    def показать_информацию(self):
        print(f"ФИО: {self.фио}, Группа: {self.группа}, Оценка: {self.оценка}, Статус: {self.статус}")
студенты = []
for i in range(5):
    фио = input(f"Введите ФИО студента {i+1}: ")
    группа = input(f"Введите номер группы студента {i+1}: ")
    оценка = int(input(f"Введите оценку студента {i+1}: "))
    студент = Студент(фио, группа, оценка)
    студенты.append(студент)
print("\nИнформация о студентах:")
for студент in студенты:
    студент.показать_информацию()
#задание 3
class Студент:
    def __init__(self, фио, группа, курс, оценка1, оценка2, идентификатор):
        self.фио = фио
        self.группа = группа
        self.курс = курс
        self.оценка1 = оценка1
        self.оценка2 = оценка2
        self.идентификатор = идентификатор
    def определить_статус(self, оценка):  # (Опционально)
        if оценка == 5:
            return "отличник"
        elif оценка == 4:
            return "хорошист"
        elif оценка == 3:
            return "троечник"
        else:
            return "двоечник"
    def перевести_на_следующий_курс(self):
        if self.оценка1 >= 3 and self.оценка2 >= 3:
            self.курс += 1
            print(f"Студент {self.фио} переведен на {self.курс} курс.")
        else:
            print(f"Студент {self.фио} остается на {self.курс} курсе.")
    def показать_информацию(self):
        print(f"ID: {self.идентификатор}, ФИО: {self.фио}, Группа: {self.группа}, Курс: {self.курс}, Оценка 1: {self.оценка1}, Оценка 2: {self.оценка2}")
студенты = []
for i in range(2):
    фио = input(f"Введите ФИО студента {i+1}: ")
    группа = input(f"Введите номер группы студента {i+1}: ")
    курс = int(input(f"Введите номер курса студента {i+1}: "))
    оценка1 = int(input(f"Введите оценку за первый экзамен студента {i+1}: "))
    оценка2 = int(input(f"Введите оценку за второй экзамен студента {i+1}: ") )
    идентификатор = input(f"Введите идентификатор студента {i+1}: ")
    студент = Студент(фио, группа, курс, оценка1, оценка2, идентификатор)
    студенты.append(студент)
print("\nИнформация о студентах:")
for студент in студенты:
    студент.показать_информацию()
    студент.перевести_на_следующий_курс()
    print()

#задание 4
class Зарплата:
    def __init__(self, тарифная_ставка, отработано_дней):
        self.тарифная_ставка = тарифная_ставка
        self.отработано_дней = отработано_дней
    def рассчитать_зарплату(self, объем_продаж):
        основная_зарплата = self.тарифная_ставка * self.отработано_дней

        if объем_продаж > 1000000:
            процент = 0.10
            бонус = основная_зарплата * процент
            зарплата_с_бонусом = основная_зарплата + бонус
            print("Объем продаж превысил 1 000 000! Начислен бонус.")
        else:
            штрафной_процент = 0.05
            штраф = основная_зарплата * штрафной_процент
            зарплата_со_штрафом = основная_зарплата - штраф
            print("Объем продаж не достиг 1 000 000! Удержан штраф.")
            зарплата_с_бонусом = зарплата_со_штрафом
        return зарплата_с_бонусом
ставка = float(input("Введите тарифную ставку за день: "))
дни = int(input("Введите количество отработанных дней: "))
продажи = float(input("Введите объем продаж: "))
зарплата = Зарплата(ставка, дни)
итоговая_зарплата = зарплата.рассчитать_зарплату(продажи)
print(f"Итоговая зарплата: {итоговая_зарплата}")

#РАЗДЕЛ 2 ЗАДАНИЕ 1
class CoffeeMachine:
    def __init__(self):
        self.drinks = {
            "Эспрессо": {"water": 50, "milk": 0, "sugar": 0, "cups": 1},
            "Капучино": {"water": 50, "milk": 100, "sugar": 0, "cups": 1},
            "Латте": {"water": 50, "milk": 150, "sugar": 0, "cups": 1},
            "Американо": {"water": 100, "milk": 0, "sugar": 0, "cups": 1},
            "Мокко": {"water": 50, "milk": 100, "sugar": 10, "cups": 1},
        }
        self.stock = {
            "water": 1000,
            "milk": 1000,
            "sugar": 500,
            "cups": 20,
        }
        self.password = "123"
    def display_drinks(self):
        print("Доступные напитки:")
        for drink in self.drinks:
            print(drink)
    def check_stock(self, drink):
        required = self.drinks[drink]
        for item in required:
            if self.stock[item] < required[item]:
                return False
        return True
    def make_drink(self, drink):
        if self.check_stock(drink):
            for item in self.drinks[drink]:
                self.stock[item] -= self.drinks[drink][item]
            print(f"Ваш {drink} готов!")
        else:
            print("Недостаточно запасов для приготовления этого напитка.")
    def refill_stock(self):
        print("Запасы успешно обновлены!")
        for item in self.stock:
            self.stock[item] += 500
    def service_mode(self):
        entered_password = input("Введите пароль: ")
        if entered_password == self.password:
            print("Вы вошли в режим обслуживания.")
            self.refill_stock()
        else:
            print("Неверный пароль!")
def main():
    machine = CoffeeMachine()
    while True:
        role = input("Выберите роль (покупатель/сервисный специалист/выход): ").strip().lower()
        if role == "покупатель":
            machine.display_drinks()
            drink_choice = input("Выберите напиток: ").strip()
            if drink_choice in machine.drinks:
                add_sugar = input("Добавить сахар? (да/нет): ").strip().lower() == 'да'
                add_milk = input("Добавить молоко? (да/нет): ").strip().lower() == 'да'
                if add_sugar:
                    machine.drinks[drink_choice]["sugar"] += 10
                if add_milk:
                    machine.drinks[drink_choice]["milk"] += 50
                machine.make_drink(drink_choice)
            else:
                print("Такого напитка нет.")
        elif role == "сервисный специалист":
            machine.service_mode()
        elif role == "выход":
            print("Выход из программы.")
            break
        else:
            print("Неверная роль. Пожалуйста, выберите снова.")
if __name__ == "__main__":
    main()
